[general]
# General configuration for the unisd agent.  These settings will control considerations
# for agent startup and model aquisition as well as managing external access control.

# verbose sets the logging verbosity at the top level.  More control can be added
# with the logfile option.  verbose takes an integer from 0 to 2, as an index
# into the logging option list in increasing verbosity [WARN, INFO, DEBUG]
#verbose=0

# logfile provides a path to a yaml logging descriptor file.  This file
# may contain configuration for more complex logging schemes i.e.
# rotation-logs, different verbosity levels for submodules, etc.
# for a complete list of logging namespaces, use the python helper function
# unis.utils.list_loggers()
#logfile=

# interface sets the ip address at which the server should listen for incoming
# connections.  The default behavior will accept any incoming connections, but this
# can be restricted by specifying an individual interface, such as 127.0.0.1 to
# only accept connections from the local host.
#interface=0.0.0.0

# Like interface, port sets the TCP address at which the agent can be contacted.
#port=8888

# plugin is a comma delimited list of python modules that adhere to the
# unis.plugins.Plugin interface.  These plugins invoke additional behavior
# within the agent when processing records.
# i.e. my.plugins.ABAC,unis.plugins.Auth
#plugin=

# the 'schema' option contains a path to a index file.  This index contains a line
# delimited document, each line of which is a string URI pointing to a model schema. If
# not schema file is set, these are set to the most recent model version available
# from the OPEN group.
#schema=

# cache sets the directory path used by unisd to store local versions
# of the schema model.  This serves to improve query time as well as
# support offline modes, where the schema can be placed in a local directory
# and pulled from that repository rather than the ground-truth remote source.
#cache=~/.unis/.cache
cache=.cache

# When true, lookupip instructs unisd to request an externally facing ip
# address from the ident.me service.  This option requires WAN access.
# By default, records added to unisd will generate a hostname from the
# incoming request.
#lookupip=false

[reg]
# The reg group is responsible for remote registration of the unisd agent.
# By default, the unisd agent will run as a single, isolated agent.  However,
# when provided with one or more parent(s), it can register itself to a
# heirarchy of unisd agents; each of which is responsible for reporting its
# children and resources stored therein.

# By setting the community, the unisd agent will advertise itself to parents
# as being a member of a collection of instances identified uniquely by name.
# Clients can query top-level unisd instances to identify children that may
# contain data of interest.  i.e. community=SC21,OSiRIS would set the
# unisd instance to register to the SC21 and OSiRIS community.
#community=

# Setting a comma delimited list of parents instructs unisd to register itself
# with each parent and advertise data alternations at a regular heartbeat.
# parents should each be designated by a uri.
#parent=

# key should be set to a public key files for communicating with the parent
# unis instances.  The index of a given cert file should match its instance
# in the 'parent' option.
#pub=

# period sets the rate at which parents are updated with the current state of
# the agent.  This period is intended to be a long poll period and may perform
# poorly at rates faster than 5 minutes.
#period=3600

[auth]
# auth contains options for configuring the authentication context for incoming
# client connections to the agent.  Additional options may be necessary for
# custom authentication plugins.

# By default, unis uses PAM to authenticate users.  With the engine
# option, you can set this to an alternate scheme.  See the unis.auth
# documentation for more.
#engine=unis.auth.pam

# The allowanon and rootuser options are specifically for use in the
# unis.auth.pam module and are included here as examples of
# module based options

# allowanon determines whether pam should allow record creation
# and modification by the generic anonymous user.  Such records always
# have the 777 access privilage level.
#allowanon=True

# rootuser defines the users with read/write privilage on internal
# unis configuration records.  This user may modify other users'
# default privilages, ownership control, etc.
#rootuser

[db]
# db options configure the connection to the backend database.  This
# database maintains the records.

# Set the port and host for the database - where applicable - with
# the host and port configuration fields.
#port=27017
#host=127.0.0.1

# The database name is used to segregate distinct instances of unis within
# a single database instance.  This option allows you to run multiple
# instances on a single machine by changing the name to a more context
# appropriate value.
#name=default

# If the backend database is password protected (recommended for
# production deployments), the user and password fields are
# required for unis to log into the backend dtabase on
# initialization.
#username=
#password=

# Instead, the login option can be set to true.  This will prompt
# the user for a username and password when the agent begins
# initialization.
#login=false

[col]
# Collections contain default permission levels.  This value will be used
# if no other permission level is configured for the record on insertion.
# When new records are created, RESTful parameters take precedence.
# Lacking parameters, the configuration will default to the collection's
# permission level, which is set on agent startup.

# auth sets the global authorization default.  When other values are not
# present, this value will be assigned to each collection on startup
# unless a unique permission is designated with the 'authfor' option.
#auth=750

# Permissions for a single collection can be set with the 'authfor'
# option.  This option takes a list of <collectionname>:<auth> pairs.
# i.e. nodes:775
#authfor=
